services:
  order-db:
    container_name: order-db
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=order'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5433:5432'
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - service-network

  product-db:
    container_name: product-db
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=product'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5434:5432'
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - service-network

  stock-db:
    container_name: stock-db
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=stock'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5435:5432'
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - service-network

  user-db:
    container_name: user-db
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=user'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5436:5432'
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - service-network

  order-service:
    container_name: order-service
    build: ./order-service
    ports:
      - "8081:8081"
    depends_on:
      order-db:
        condition: service_healthy
    networks:
      - service-network

  product-service:
    container_name: product-service
    build: ./product-service
    ports:
      - "8082:8082"
    depends_on:
      product-db:
        condition: service_healthy
    networks:
      - service-network

  stock-service:
    container_name: stock-service
    build: ./stock-service
    ports:
      - "8083:8083"
    depends_on:
      stock-db:
        condition: service_healthy
    networks:
      - service-network

  user-service:
    container_name: user-service
    build: ./user-service
    ports:
      - "8084:8084"
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - service-network
      - keycloak

  gateway:
    container_name: gateway
    build: ./gateway
    ports:
      - "8080:8080"
    depends_on:
      - order-service
      - product-service
      - stock-service
      - user-service
    networks:
      - service-network

  eureka-server:
    container_name: eureka-server
    build: ./gateway
    ports:
      - "8761:8761"
    depends_on:
      - order-service
      - product-service
      - stock-service
      - user-service
      - gateway
    networks:
      - service-network

  redis:
    container_name: redis
    image: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    networks:
      - service-network

  redis-insight:
    image: redislabs/redisinsight
    container_name: redis-insight
    ports:
      - 8001:8001

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    hostname: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:29093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
    networks:
      - service-network

  redpanda:
    image: docker.redpanda.com/redpandadata/console:latest
    restart: always
    container_name: redpanda-console
    environment:
      KAFKA_BROKERS: kafka:29092
    ports:
      - "8090:8080"
    depends_on:
      - kafka

  keycloak-db:
    container_name: keycloak-db
    image: postgres:13.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: user
      POSTGRES_PASSWORD: secret
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - keycloak

  keycloak:
    image: jboss/keycloak
    container_name: keycloak
    environment:
      DB_DATABASE: keycloak
      DB_USER: user
      DB_PASSWORD: secret
    ports:
      - "18443:8443"
      - "28080:8080"
      - "19990:9990"
    restart: unless-stopped
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - keycloak
      - service-network

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./gateway/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus-data
    depends_on:
      - gateway
    networks:
      - service-network

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - gateway
    networks:
      - service-network
volumes:
  prometheus_data: {}
networks:
  service-network:
  keycloak: